# Install the Google AI SDK
!pip install -q -U google-generativeai

import google.generativeai as genai
from google.colab import userdata
import json

# Configure the API with your secret key
try:
    genai.configure(api_key=userdata.get('GOOGLE_API_KEY'))
    print("Google AI SDK configured successfully.")
except Exception as e:
    print(f"Error configuring SDK: {e}")

# --- Master Prompt Development ---
# This is the core instruction set for our AI model.
master_prompt = """
You are an expert industrial automation engineer with 20 years of experience specializing in generic IEC 61131-3 programming. 
Your task is to convert a natural language functional description into both Structured Text (ST) and PLCopen XML for Ladder Logic (LD).

You must adhere to the following rules:
1.  Analyze the request carefully to identify all variables, conditions, and actions.
2.  Create logical, CamelCase variable names (e.g., 'StartButton', 'TankLevel', 'MainValve').
3.  The primary output must be Structured Text.
4.  The secondary output must be a valid PLCopen XML representation of the same logic.
5.  Provide the final output in a single, clean JSON object with two keys: "structured_text" and "ladder_logic_xml". 
6.  Do not include any explanation, commentary, or markdown formatting outside of the JSON block.

--- EXAMPLE ---
NL: "If the start push button is pressed and the safety relay is active, energize the main motor contactor."
JSON:
{
  "structured_text": "MainMotorContactor := StartPushButton AND SafetyRelayActive;",
  "ladder_logic_xml": "<project xmlns=\\"http://www.plcopen.org/xml/tc6_0201\\">... (valid XML here) ...</project>"
}
--- END OF EXAMPLE ---

Convert the following user request:
"""

# --- Testing the Prompt ---
model = genai.GenerativeModel('gemini-2.5-flash')

user_request = "If the tank level is greater than 90.5, turn on the high level alarm. Otherwise, turn it off."

full_prompt = master_prompt + "\nNL: \"" + user_request + "\"\nJSON:"

print("--- SENDING PROMPT TO  ---")
print(full_prompt)

response = model.generate_content(full_prompt)

print("\n--- RAW RESPONSE FROM GEMINI ---")
print(response.text)

# Try to parse the response as JSON to check for validity
try:
    parsed_json = json.loads(response.text)
    print("\n--- JSON PARSED SUCCESSFULLY ---")
    print("Structured Text:", parsed_json.get("structured_text"))
except json.JSONDecodeError:
    print("\n--- ERROR: Response was not valid JSON. ---")